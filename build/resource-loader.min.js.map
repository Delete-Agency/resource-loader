{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resource-loader.js","webpack:///./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ResourceLoader","_this","this","preloadedResources","arguments","length","undefined","_classCallCheck","_preloadedResources","map","url","_getResolvedResourceUrl","_loadingResources","resources","Promise","all","loadResource","resourceUrl","_getLoadingPromise","then","v","status","error","reason","_this2","filter","preloadedResourceUrl","window","performance","getEntriesByName","console","log","concat","isResourceLoaded","resolve","node","_findResourceNodeByUrl","_getLoadingPromiseFromNode","_loadResource","e","reject","selector","_getQuerySelectorByUrl","resolvedUrl","document","querySelector","_getResourceTypeByUrl","_getScriptSelector","_getStyleLinkSelector","addEventListener","_this3","loadPromise","_getLoadingPromiseOfInsertion","removeFromResources","_insertScript","_insertStyleLink","resource","_resolvingAnchor","createElement","href","match","Error","script","async","defer","src","getElementsByTagName","parentNode","insertBefore","link","rel","head","insertAdjacentElement","__webpack_exports__","resourceLoader"],"mappings":"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","file":"resource-loader.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const RESOURCE_TYPE_SCRIPT = 'script';\r\nconst RESOURCE_TYPE_STYLES = 'styles';\r\n\r\n/**\r\n * Note: There can be some cases when we are trying to get promise from node which was failed to load.\r\n * It happens because isResourceLoaded relies on window.performance (0Performance Timing API0 that is inconsistent between browsers at the moment:\r\n * https://github.com/w3c/resource-timing/issues/12\r\n * Some of the implementations (Safari, Chrome) don't add PerformanceResource entry\r\n * when particular resource is failed (but they will in the future according to the issue above).\r\n * As a result we think that the resource is still loading and will be waiting forever\r\n * because obviously load and error events are not gonna be triggered.\r\n * These cases aren't covered at the moment and will likely be fixed after browsers have consistent Performance Timing API implementation\r\n */\r\nexport default class ResourceLoader {\r\n    constructor(preloadedResources = []) {\r\n        this._preloadedResources = preloadedResources.map(url => this._getResolvedResourceUrl(url));\r\n        this._loadingResources = {};\r\n    }\r\n\r\n    /**\r\n     * @param {Array} resources\r\n     * @return {Promise}\r\n     */\r\n    load(resources) {\r\n        return Promise.all(resources.map(this.loadResource.bind(this)));\r\n    }\r\n\r\n    /**\r\n     * @param {string} resourceUrl\r\n     * @return {Promise}\r\n     */\r\n    loadResource(resourceUrl) {\r\n        function reflect(promise) {\r\n            return promise.then(\r\n                (v) => {\r\n                    return { status: 'fulfilled', value: v };\r\n                },\r\n                (error) => {\r\n                    return { status: 'rejected', reason: error };\r\n                }\r\n            );\r\n        }\r\n\r\n        return reflect(this._getLoadingPromise(resourceUrl));\r\n    }\r\n\r\n    /**\r\n     * @param {string} resourceUrl\r\n     * @return {boolean}\r\n     */\r\n    isResourceLoaded(resourceUrl) {\r\n        // first check if we mark this resources as preloaded by passing it to the constructor\r\n        const preloadedResources = this._preloadedResources.filter(preloadedResourceUrl => preloadedResourceUrl === this._getResolvedResourceUrl(resourceUrl));\r\n        if (preloadedResources.length !== 0) {\r\n            return true;\r\n        }\r\n\r\n        // then check if the resource has already been loaded\r\n        // we can should resolved url as a name in performance entries\r\n        const loadedResource = window.performance.getEntriesByName(this._getResolvedResourceUrl(resourceUrl), 'resource');\r\n        if (loadedResource.length !== 0) {\r\n            console.log(`${resourceUrl} is already loaded`);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    _getLoadingPromise(resourceUrl) {\r\n        try {\r\n            if (this.isResourceLoaded(resourceUrl)) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const node = this._findResourceNodeByUrl(resourceUrl);\r\n            if (node) {\r\n                console.log(`${resourceUrl} is found as a node`);\r\n                return this._getLoadingPromiseFromNode(node, resourceUrl);\r\n            }\r\n\r\n            return this._loadResource(resourceUrl);\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    _findResourceNodeByUrl(resourceUrl) {\r\n        let selector = this._getQuerySelectorByUrl(resourceUrl);\r\n        const resolvedUrl = this._getResolvedResourceUrl(resourceUrl);\r\n        if (resourceUrl !== resolvedUrl) {\r\n            selector += `,${this._getQuerySelectorByUrl(resolvedUrl)}`\r\n        }\r\n        return document.querySelector(selector);\r\n    }\r\n\r\n    _getQuerySelectorByUrl(url) {\r\n        const type = this._getResourceTypeByUrl(url);\r\n        switch (type) {\r\n            case RESOURCE_TYPE_SCRIPT:\r\n                return `${this._getScriptSelector(url)}`;\r\n            case RESOURCE_TYPE_STYLES:\r\n                return `${this._getStyleLinkSelector(url)}`;\r\n        }\r\n    }\r\n\r\n    _getLoadingPromiseFromNode(node) {\r\n        return new Promise((resolve, reject) => {\r\n            node.addEventListener('load', (e) => {\r\n                resolve();\r\n            });\r\n            node.addEventListener('error', (error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    _loadResource(resourceUrl) {\r\n        console.log(`${resourceUrl} will be inserted`);\r\n        const url = this._getResolvedResourceUrl(resourceUrl);\r\n        // if not we should load it ourselves\r\n        // but in case it is currently loading we should store a promise\r\n        // to avoid multiple downloading of the same request\r\n        if (!(url in this._loadingResources)) {\r\n            const loadPromise = this._getLoadingPromiseOfInsertion(url);\r\n            this._loadingResources[url] = loadPromise;\r\n            // after a promise is either fulfilled or rejected\r\n            // we should remove it from the loading resources collection\r\n            // we can repeat the process\r\n            // and try to load again next time this resource is requested\r\n            const removeFromResources = () => delete this._loadingResources[url];\r\n            loadPromise.then(removeFromResources, removeFromResources);\r\n        }\r\n        return this._loadingResources[url];\r\n    }\r\n\r\n    _getLoadingPromiseOfInsertion(url) {\r\n        const type = this._getResourceTypeByUrl(url);\r\n        let node = null;\r\n        switch (type) {\r\n            case RESOURCE_TYPE_SCRIPT:\r\n                node = this._insertScript(url);\r\n                break;\r\n            case RESOURCE_TYPE_STYLES:\r\n                node = this._insertStyleLink(url);\r\n                break;\r\n        }\r\n        return this._getLoadingPromiseFromNode(node);\r\n    }\r\n\r\n    _getResolvedResourceUrl(resource) {\r\n        if (!this._resolvingAnchor) {\r\n            this._resolvingAnchor = document.createElement('a')\r\n        }\r\n        this._resolvingAnchor.href = resource;\r\n        return this._resolvingAnchor.href;\r\n    }\r\n\r\n    _getResourceTypeByUrl(url) {\r\n        if (url.match(/.\\.css$/)) {\r\n            return RESOURCE_TYPE_STYLES;\r\n        } else if (url.match(/.\\.js$/)) {\r\n            return RESOURCE_TYPE_SCRIPT;\r\n        }\r\n\r\n        throw new Error(`The type of resource ${url} could not be recognized`);\r\n    }\r\n\r\n    _insertScript(url) {\r\n        const script = document.createElement('script');\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.src = url;\r\n        const s = document.getElementsByTagName('script')[0];\r\n        s.parentNode.insertBefore(script, s);\r\n        return script;\r\n    }\r\n\r\n    _insertStyleLink(url) {\r\n        const link = document.createElement('link');\r\n        link.rel = 'stylesheet';\r\n        link.href = url;\r\n        document.head.insertAdjacentElement('beforeend', link);\r\n        return link;\r\n    }\r\n\r\n    _getScriptSelector(url) {\r\n        return `script[src=\"${url}\"]`\r\n    }\r\n\r\n    _getStyleLinkSelector(url) {\r\n        return `link[href=\"${url}\"]`;\r\n    }\r\n}","import ResourceLoader from './src/resource-loader';\r\n\r\nconst resourceLoader = new ResourceLoader();\r\n\r\nexport { resourceLoader };"],"sourceRoot":""}